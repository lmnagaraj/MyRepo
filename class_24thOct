['43', '56', '78', '90', '23']
>>> for x in naga:
...     str(x)
...
'43'
'56'
'78'
'90'
'23'
>>> def lakshmi(x):
...     return(str(x))
...
>>> naga
[43, 56, 78, 90, 23]
>>> for x in naga:
...  lakshmi(x)
...
'43'
'56'
'78'
'90'
'23'
>>> map(str, naga)
['43', '56', '78', '90', '23']
>>> map(lambda x: x > 60, naga)
[False, False, True, True, False]
>>> map(lambda x: x > 60, naga)
[False, False, True, True, False]
>>> naga
[43, 56, 78, 90, 23]
>>> filter(lambda x: x > 60, naga)
[78, 90]
>>>
>>>
>>>
>>> def balaji(x):
...     if x > 60:
...             return(x)
...
>>> filter(balaji, naga)
[78, 90]
>>> naga
[43, 56, 78, 90, 23]
>>> reduce(lambda x, y: x + y, naga)
290
>>> naga
[43, 56, 78, 90, 23]
>>> def lakshmi(x, y):
...     return(x + y)
...
>>> reduce(lakshmi, naga)
290
>>> naga
[43, 56, 78, 90, 23]
>>> map(str, naga)
['43', '56', '78', '90', '23']
>>> naga
[43, 56, 78, 90, 23]
>>> balaji = map(str, naga)
>>> balaji
['43', '56', '78', '90', '23']
>>> [ x for x in range(10) if x > 5 ]
[6, 7, 8, 9]
>>> filter(lambda x: x > 5, range(10))
[6, 7, 8, 9]
>>> def filter_lakshmi(x):
...     if x > 5:
...             return(x)
...
>>> filter(filter_lakshmi, range(10))
[6, 7, 8, 9]
>>>
>>>
>>>
>>> balaji = lambda x: x + 100
>>> balaji(100)
200
>>> def balaji(x):
...     x + 100
...     return(x)
...
>>> balaji(100)
100
>>> def balaji(x):
...     x = x + 100
...     return(x)
...
>>> balaji(100)
200
>>> lakshmi = lambda x: x + 100
>>> lakshmi(100)
200
>>> balaji(500)
600
>>> lakshmi = lambda x: x + 100
>>> balaji
<function balaji at 0x10f1f8578>
>>> naga = balaji
>>> naga
<function balaji at 0x10f1f8578>
>>> naga(500)
600
>>> a = 10
>>> b = a
>>> a
10
>>> b
10
>>> exit()
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$ pwd
/var/tmp/naga/git/learnPython/learnPython/MyRepo
raj:MyRepo nagee$ vi class_22thOct
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$ git add .
git commit raj:MyRepo nagee$ git commit -m 'Class on 22nd Oct"
>
raj:MyRepo nagee$ git commit -m 'Class on 22nd Oct'
[master 269c4a5] Class on 22nd Oct
 Committer: Nagarajan <nagee@raj.local>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 581 insertions(+)
 create mode 100644 class_22thOct
raj:MyRepo nagee$ git push
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 2.31 KiB | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/lmnagaraj/MyRepo.git
   c14053a..269c4a5  master -> master
raj:MyRepo nagee$

Session Restored

Last login: Mon Oct 15 20:20:58 on ttys000
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$ clear
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$ python
Python 2.7.10 (default, Oct 23 2015, 19:19:21)
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> naga = range(5)
>>> naga[1] = range(3)
>>> naga[1][1] = range(3)
>>> naga
[0, [0, [0, 1, 2], 2], 2, 3, 4]
>>>
>>>
>>> def raj(naga):
...  for x in naga:
...     if 'list' not in str(type(x)):
...             print(x)
...     else:
...             raj(x)
...
>>> raj(naga)
0
0
0
1
2
2
2
3
4
>>>
>>>
>>>
>>>
>>> a = " i am globla"
>>> def naga():
...     a = "i am local"
...     print(a)
...
>>> print(a)
 i am globla
>>> naga()
i am local
>>> print(a)
 i am globla
>>> naga = range(10)
>>> nag
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'nag' is not defined
>>> naga
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> [ x fox x in range naga if x > 5 ]
  File "<stdin>", line 1
    [ x fox x in range naga if x > 5 ]
          ^
SyntaxError: invalid syntax
>>> [ x fox x in naga if x > 5 ]
  File "<stdin>", line 1
    [ x fox x in naga if x > 5 ]
          ^
SyntaxError: invalid syntax
>>> naga
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> [ x for x in naga if x > 5 ]
[6, 7, 8, 9]
>>> [ x for x in naga  ]
KeyboardInterrupt
>>> for x in naga:
...  x
...
0
1
2
3
4
5
6
7
8
9
>>> [ x for x in naga ]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> [ x + 10 for x in naga ]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> naga
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> map(str, naga)
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> filter(lambda x: x > 6, naga)
[7, 8, 9]
>>> naga
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> def lakshmi(x):
...     if x > 6:
...             return(x)
...
>>> lakshmi(10)
10
>>> filter(lakshmi, naga)
[7, 8, 9]
>>> filter(lambda x: x > 6, naga)
[7, 8, 9]
>>> reduce(lambda x, y: x + y, naga)
45
>>> def lakshmi(x, y):
...  return(x + y)
...
>>> reduce(lakshi, naga)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'lakshi' is not defined
>>> reduce(lakshmi, naga)
45
>>> reduce(lambda x, y: x + y, naga)
45
>>>
>>> def naga(a=10):
...     print(a)
...
>>> naga(a=20)
20
>>> naga()
10
>>> def naga(a=10, b):
...     print(a, b)
...
  File "<stdin>", line 1
SyntaxError: non-default argument follows default argument
>>> def naga(b, a=10):
...     print(a, b)
...
>>> naga(3)
(10, 3)
>>> naga(3, a=1025)
(1025, 3)
>>> def naga(a=10, b):
KeyboardInterrupt
>>> def naga(*a):
...  print(a)
...
>>> naga(1)
(1,)
>>> naga(1, 3)
(1, 3)
>>> naga(1, 3, 4)
(1, 3, 4)
>>> naga(a=10)
KeyboardInterrupt
>>> def naga(**raj):
...     print(raj)
...
>>> naga(a=10, b=20, c="naga", d=9.6)
{'a': 10, 'c': 'naga', 'b': 20, 'd': 9.6}
>>> naga(a=10, b=20, c="naga")
{'a': 10, 'c': 'naga', 'b': 20}
>>> def naga(*a, **raj):
...     print(a, raj)
...
>>> naga(1, 2, 3, a=10, b=20, c="naga")
((1, 2, 3), {'a': 10, 'c': 'naga', 'b': 20})
>>> def satya(a="naga"):
...  print(a)
...
>>> satya(a="balaji", b="lakshmi")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: satya() got an unexpected keyword argument 'b'
>>> naga = range(10)
>>> naga
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> type(naga)
<type 'list'>
>>> naga = (1, 2, 3)
>>> type(naga)
<type 'tuple'>
>>> for x in naga:
...  x
...
1
2
3
>>> dir(naga)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']
>>> naga
(1, 2, 3)
>>> naga.append(5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> del(naga)
>>> naga
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'naga' is not defined
>>> naga = 1,2,
>>> naga
(1, 2)
>>> naga = 1,2,1,3
>>> naga
(1, 2, 1, 3)
>>> naga.count(1)
2
>>> def balaji(*a):
...     print(a)
...
>>> balaji(1,2,3,4)
(1, 2, 3, 4)
>>> balaji([1,2,3,4])
([1, 2, 3, 4],)
>>> def balaji(*a):
...     print(type(a))
...     print(a)
...
>>> balaji([1,2,3,4])
<type 'tuple'>
([1, 2, 3, 4],)
>>> balaji(10)
<type 'tuple'>
(10,)
>>> balaji(10, 12)
<type 'tuple'>
(10, 12)
>>> import sys
>>> sys.version
'2.7.10 (default, Oct 23 2015, 19:19:21) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]'
>>> sys.info
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'info'
>>> import os
>>> os.version
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'version'
>>> os.ver
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'ver'
>>> os.info
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'info'
>>> dir(os)
['EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_OK', 'NGROUPS_MAX', 'O_APPEND', 'O_ASYNC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'P_NOWAIT', 'P_NOWAITO', 'P_WAIT', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'UserDict', 'WCONTINUED', 'WCOREDUMP', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_copy_reg', '_execvpe', '_exists', '_exit', '_get_exports_list', '_make_stat_result', '_make_statvfs_result', '_pickle_stat_result', '_pickle_statvfs_result', '_spawnvef', 'abort', 'access', 'altsep', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'ctermid', 'curdir', 'defpath', 'devnull', 'dup', 'dup2', 'environ', 'errno', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchdir', 'fchmod', 'fchown', 'fdopen', 'fork', 'forkpty', 'fpathconf', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'getcwd', 'getcwdu', 'getegid', 'getenv', 'geteuid', 'getgid', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'linesep', 'link', 'listdir', 'lseek', 'lstat', 'major', 'makedev', 'makedirs', 'minor', 'mkdir', 'mkfifo', 'mknod', 'name', 'nice', 'open', 'openpty', 'pardir', 'path', 'pathconf', 'pathconf_names', 'pathsep', 'pipe', 'popen', 'popen2', 'popen3', 'popen4', 'putenv', 'read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'rmdir', 'sep', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setregid', 'setreuid', 'setsid', 'setuid', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv', 'spawnve', 'spawnvp', 'spawnvpe', 'stat', 'stat_float_times', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'symlink', 'sys', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'tempnam', 'times', 'tmpfile', 'tmpnam', 'ttyname', 'umask', 'uname', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'walk', 'write']
>>> os.uname
<built-in function uname>
>>> os.version
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'version'
>>> os.versions
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'versions'
>>> os.ver
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'ver'
>>> os.vers
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'vers'
>>> os.info
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'info'
>>> sys.name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'name'
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__package__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_getframe', '_mercurial', 'api_version', 'argv', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_clear', 'exc_info', 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'gettrace', 'hexversion', 'last_traceback', 'last_type', 'last_value', 'long_info', 'maxint', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'py3kwarning', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoptions']
>>> sys.version
'2.7.10 (default, Oct 23 2015, 19:19:21) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)]'
>>> type(sys.version)
<type 'str'>
>>> os.name
'posix'
>>> def balaji(*naga):
...  print(type(naga))
...
>>> balaji(1, 2, 3)
<type 'tuple'>
>>> def balaji(**naga):
...     print(naga)
...
>>> balaji(a=10)
{'a': 10}
>>>
>>>
>>>
>>> (name = balaji, age = 30, status = employee)
KeyboardInterrupt
>>> a = dict()
>>> type(a)
<type 'dict'>
>>> a
{}
>>> a['name'] = 'balaji'
>>> a = list()
>>> type(a)
<type 'list'>
>>> a = []
>>> a
[]
>>> type(a)
<type 'list'>
>>> a = [1, 2, 3, 4]
>>> a = []
>>> a = list()
>>> a = dict()
>>> a = {}
>>> a = { 'name': 'balaji'}
>>> a
{'name': 'balaji'}
>>> student = { 'student1': 'balaji', 'student2': 'satya', 'student3': 'lakshmi'}
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'balaji'}
>>> type(student)
<type 'dict'>
>>> student['student4'] = 'naga'
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'balaji', 'student4': 'naga'}
>>> student['student1'] = 'naga'
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> raj = [2, 4, 6]
>>> raj
[2, 4, 6]
>>> raj[1]
4
>>> raj[1] = 'naga'
>>> raj
[2, 'naga', 6]
>>> raj = (2, 4, 6)
>>> raj[1]
4
>>> raj[1] = 'naga;
  File "<stdin>", line 1
    raj[1] = 'naga;
                  ^
SyntaxError: EOL while scanning string literal
>>> raj[1] = 'naga'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> new_dict = dict()
>>> new_dict
{}
>>> del(new_dict)
>>> new_dict
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'new_dict' is not defined
>>> new_dict = { 'key1' : 'value1', 10:100, 'age':30, 'list1': [10, "naga"] }
>>> key:value
KeyboardInterrupt
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> raj
(2, 4, 6)
>>> raj = [ 2, 4, 6]
>>> raj
[2, 4, 6]
>>> raj[1]
4
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> new_dict['key1']
'value1'
>>> new_dict['list1']
[10, 'naga']
>>> new_dict['list1'][1]
'naga'
>>> new_dict['list1']
[10, 'naga']
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> dir(new_dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> new_dict.items()
[('age', 30), ('key1', 'value1'), ('list1', [10, 'naga']), (10, 100)]
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> new_dict.has_key('value1')
False
>>> new_dict.has_key('key1')
True
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student.has_key('student1')
True
>>> student.has_key('student10')
False
>>> student.has_key(10)
False
>>> new_dict.has_key(10)
True
>>> new_dict
{'age': 30, 'key1': 'value1', 'list1': [10, 'naga'], 10: 100}
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> if student.has_key('student2'):
...     print(student['student2'])
...
satya
>>> student['student2']
'satya'
>>> name = 'satya'
>>> name = { 'my_name' : 'satya' }
>>> name['my_name']
'satya'
>>> raj
[2, 4, 6]
>>> raj[2]
6
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>>
>>>
>>> dir(student)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> student.keys()
['student3', 'student2', 'student1', 'student4']
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student.values()
['lakshmi', 'satya', 'naga', 'naga']
>>> student.items()
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>> student.items()[2]
('student1', 'naga')
>>> type(student.items()[2])
<type 'tuple'>
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> for x in student:
...     x
...
'student3'
'student2'
'student1'
'student4'
>>> for x in student:
...  student[x]
...
'lakshmi'
'satya'
'naga'
'naga'
>>> student.items()
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>> for x in student.items():
...  x
...
('student3', 'lakshmi')
('student2', 'satya')
('student1', 'naga')
('student4', 'naga')
>>> for x in student.items():
KeyboardInterrupt
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student['student1']
'naga'
>>> for x in student.items():
...     x
...
('student3', 'lakshmi')
('student2', 'satya')
('student1', 'naga')
('student4', 'naga')
>>> for x in student.items():
...  if x[1] == 'naga':
...     print(x)
...
('student1', 'naga')
('student4', 'naga')
>>> raj
[2, 4, 6]
>>> for x in raj:
...     if x == 4:
...             print(x)
...
4
>>> raj
[2, 4, 6]
>>> raj = [ (1, 2), (2, 4), (3, 4) ]
>>>
>>> for x in raj:
...     x
...
(1, 2)
(2, 4)
(3, 4)
>>> raj = [ [1, 2], [2, 4], [3, 4] ]
>>> raj
[[1, 2], [2, 4], [3, 4]]
>>> for x in raj:
...     x
...
[1, 2]
[2, 4]
[3, 4]
>>> for x in raj:
...  x[0]
...
1
2
3
>>> for x in raj:
...     x[1]
...
2
4
4
>>> for x in raj:
...     if x[1] == 4:
...             x
...
[2, 4]
[3, 4]
>>> raj
[[1, 2], [2, 4], [3, 4]]
>>> studnet
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'studnet' is not defined
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student.items()
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>>  my_dict = student.items()
  File "<stdin>", line 1
    my_dict = student.items()
    ^
IndentationError: unexpected indent
>>> my_dict = student.items()
>>> my_dict
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>> for item in my_dict:
...     item
...
('student3', 'lakshmi')
('student2', 'satya')
('student1', 'naga')
('student4', 'naga')
>>> for item in my_dict:
...     if item[-1] == 'naga':
...             item
...
('student1', 'naga')
('student4', 'naga')
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student['student1']
'naga'
>>> student['student4']
'naga'
>>> student['naga']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'naga'
>>> my_dict
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student.items()
[('student3', 'lakshmi'), ('student2', 'satya'), ('student1', 'naga'), ('student4', 'naga')]
>>> for item in student.items():
...     item
...
('student3', 'lakshmi')
('student2', 'satya')
('student1', 'naga')
('student4', 'naga')
>>> for item in student.items():
...     if item[1] == 'naga':
...             item[0]
...
'student1'
'student4'
>>> dir(student)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> def balaji(**naga):
...     print(naga)
...
>>> balaji(a=10, b=20)
{'a': 10, 'b': 20}
>>> studnet
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'studnet' is not defined
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga'}
>>> student['dict_s'] = { "name1" : "nagarajan" }
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'dict_s': {'name1': 'nagarajan'}, 'student4': 'naga'}
>>> clear
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'clear' is not defined
>>> student
{'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'dict_s': {'name1': 'nagarajan'}, 'student4': 'naga'}
>>> student['list_1'] = range(4)
>>> student
{'list_1': [0, 1, 2, 3], 'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga', 'dict_s': {'name1': 'nagarajan'}}
>>> student['dict_s']
{'name1': 'nagarajan'}
>>> student['dict_s']['name1]
  File "<stdin>", line 1
    student['dict_s']['name1]
                            ^
SyntaxError: EOL while scanning string literal
>>> student['dict_s']['name1']
'nagarajan'
>>> student['dict_s']['name1']['name2'] = 'mano'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> student['dict_s']['name1']
'nagarajan'
>>> student['dict_s']
{'name1': 'nagarajan'}
>>> student['dict_s'] = { 'age1' : { 'age2': { 'age3' : 45} } }
>>> student
{'list_1': [0, 1, 2, 3], 'student3': 'lakshmi', 'student2': 'satya', 'student1': 'naga', 'student4': 'naga', 'dict_s': {'age1': {'age2': {'age3': 45}}}}
>>> student['age3']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'age3'
>>> student.keys()
['list_1', 'student3', 'student2', 'student1', 'student4', 'dict_s']
>>> len(student.keys())
6
>>> len(student.items())
6
>>> student[dict_s]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dict_s' is not defined
>>> student['dict_s']
{'age1': {'age2': {'age3': 45}}}
>>> student['dict_s'].items()
[('age1', {'age2': {'age3': 45}})]
>>> len(student['dict_s'].items())
1
>>> student['dict_s']
{'age1': {'age2': {'age3': 45}}}
>>> student['dict_s'].keys()
['age1']
>>> student['dict_s']['age1']
{'age2': {'age3': 45}}
>>> student['dict_s']['age1'].items()
[('age2', {'age3': 45})]
>>> len(student['dict_s']['age1'].items())
1
>>> student['dict_s']['age1'].items()
[('age2', {'age3': 45})]
>>> student['dict_s']['age1']
{'age2': {'age3': 45}}
>>> student['dict_s']['age1'].keys()
['age2']
>>> student['dict_s']['age1']['age2']
{'age3': 45}
>>> student['dict_s']['age1']['age2']['age3']
45
>>> a = [ 2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>> a
[2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>> for x in a:
...     x
...
2
4
[2, [4, 5, [5, 6, 7], 4], 67]
34
23
>>> a
[2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>> type(a)
<type 'list'>
>>> name = [ 'naga', 'raj', 'lakshmi' ]
>>> 'naga' in name
True
>>> 'raj' in name
True
>>> 'balaji' in name
False
>>> name
['naga', 'raj', 'lakshmi']
>>> type(a)
<type 'list'>
>>> 'list' in type(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: argument of type 'type' is not iterable
>>> 'list' in str(type(a))
True
>>> str(type(a))
"<type 'list'>"
>>> 'type' in str(type(a))
True
>>> 'naga' in str(type(a))
False
>>> name = 'hi i am satya'
>>> 'satya' in name
True
>>> 'hi' in name
True
>>> a
[2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>> for x in a:
...     if 'list' in str(type(x)):
...             for i in x:
...                     print(i)
...     else:
...             print(x)
...
2
4
2
[4, 5, [5, 6, 7], 4]
67
34
23
>>> for x in a:
...     if 'list' in str(type(x)):
...             for i in x:
...                     if 'list' in str(type(i)):
...                             for y in i:
...                                     print(y)
...                     else:
...                             print(i)
...     else:
...             print(x)
...
2
4
2
4
5
[5, 6, 7]
4
67
34
23
>>> a
[2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>> def balaji(naga):
...     for x in naga:
...             if 'list' not in str(type(x)):
...                     print(x)
...             else:
...                     balaji(x)
...
>>> type(2)
<type 'int'>
>>> str(type(2))
"<type 'int'>"
>>> 'int' in str(type(2))
True
>>> 'list' in str(type(2))
False
>>> 'list' not in str(type(2))
True
>>> balaji(a)
2
4
2
4
5
5
6
7
4
67
34
23
>>> a
[2, 4, [2, [4, 5, [5, 6, 7], 4], 67], 34, 23]
>>>
