>>> naga = "hi how are you"
>>> naga
'hi how are you'
>>> naga.split()
['hi', 'how', 'are', 'you']
>>> naga = "hi,how,are,you"
>>> naga.split(',')
['hi', 'how', 'are', 'you']
>>> naga = list(range(5))
>>> naga
[0, 1, 2, 3, 4]
>>> naga.pop()
4
>>> naga
[0, 1, 2, 3]
>>> naga.remove(4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: list.remove(x): x not in list
>>> naga.remove(3)
>>> naga
[0, 1, 2]
>>> naga.append(10)
>>> naga
[0, 1, 2, 10]
>>> naga.insert(2, "asdghajs")
>>> naga
[0, 1, 'asdghajs', 2, 10]
>>> naga
[0, 1, 'asdghajs', 2, 10]
>>> naga[-1]
10
>>> naga[-2]
2
>>> raj = range(20, 30)
>>> raj
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
>>> naga.append(raj)
>>> naga
[0, 1, 'asdghajs', 2, 10, [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]
>>> naga[-1]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
>>> raj
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
>>> naga.extent(raj)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'extent'
>>> naga.extend(raj)
>>> naga
[0, 1, 'asdghajs', 2, 10, [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
>>>
>>>
>>>
>>> a = 10
>>> b = 20
>>> a + b
30
>>> b = 30
>>> a + b
40
>>> a = 100
>>> a + b
130
>>> def satya():
...     print("hi i am satya")
...
>>> satya()
hi i am satya
>>> for x in range(5):
...  satya()
...
hi i am satya
hi i am satya
hi i am satya
hi i am satya
hi i am satya
>>> def satya():
...     print("hi i am satya")
...     print("hi i am naga")
...     print("hi i am balaji")
...
>>> satya()
hi i am satya
hi i am naga
hi i am balaji
>>>
>>>
>>>
>>> def add(a, b):
...     print(a + b)
...
>>> add(10, 20)
30
>>> add(10, 200)
210
>>> add(100, 200)
300
>>> raj = add(10, 20)
30
>>> raj
>>> raj1 = add(10, 20)
30
>>> raj1
>>> def add(a, b)
  File "<stdin>", line 1
    def add(a, b)
                ^
SyntaxError: invalid syntax
>>> def add(a, b):
...     return(a, b)
...
>>> raj = add(10, 20)
>>> raj
(10, 20)
>>> def add(a, b):
...     return(a + b)
...
>>> raj = add(10, 20)
>>> raj
30
>>> def print_myname(name):
...  print(name)
...
>>> print_myname("satya")
satya
>>> print_myname()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_myname() takes exactly 1 argument (0 given)
>>>
>>>
>>>
>>>
>>> def add(x, y):
...     return(x * y)
...
>>> add(10, 20)
200
>>> lakshmi = add(10, 20)
>>> lakshmi
200
>>> def satya(x, y):
...     return(x / y)
...
>>> satya(10, 5)
2
>>> x = satya(10, 5)
>>> x
2
>>> def satya(name="naga", age=10):
...     print("hi my name is %s" % name)
...     print("my age is %s" % age"
  File "<stdin>", line 3
    print("my age is %s" % age"
                              ^
SyntaxError: EOL while scanning string literal
>>>
>>> def satya(name="naga", age=10):
...     print("hi my name is %s" % name)
...     print("my age is %s" % age")
  File "<stdin>", line 3
    print("my age is %s" % age")
                               ^
SyntaxError: EOL while scanning string literal
>>>
>>> def satya(name="naga", age=10):
...     print("hi my name is %s" % name)
...     print("my age is %s" % age)
...
>>> satya()
hi my name is naga
my age is 10
>>> def add(x=10, y=20):
...  print(x + y)
...
>>> add()
30
>>> add(x=100, y=16765)
16865
>>> list= [ 12, 45, 67, 89, 90]
>>> def find_max(list_naga):
KeyboardInterrupt
>>> naga1 = [ 12, 45, 67, 89, 90]
>>> find_max(naga1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'find_max' is not defined
>>>
>>>
>>>
>>>
>>>
>>> naga
[0, 1, 'asdghajs', 2, 10, [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
>>> naga = naga1
>>> naga
[12, 45, 67, 89, 90]
>>>
>>>
>>> naga
[12, 45, 67, 89, 90]
>>> max = 0
>>> for x in naga:
...     if x > max:
...             max = x
...
>>> max
90
>>> def find_max(naga):
...     max = 0
...     for x in naga:
...             if x > max:
...                     max = x
...
>>> naga
[12, 45, 67, 89, 90]
>>> find_max(naga)
>>> max
90
>>> naga = [ 67, 34, 23, 78]
>>> find_max(naga)
>>> max
90
>>> max = 0
>>> del(max)
>>> find_max(naga)
>>> max
<built-in function max>
>>> type(max)
<type 'builtin_function_or_method'>
>>> def find_max(naga):
...     big = 0
...     for x in naga:
...             if x > big:
...                     big = x
...
>>> find_max(naga)
>>> big
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'big' is not defined
>>> def find_max(naga):
...     global big = 0
  File "<stdin>", line 2
    global big = 0
               ^
SyntaxError: invalid syntax
>>> def find_max(naga):
...     global big
...     for x in naga:
...             if x > big:
...                     big = x
...
>>> def find_max(naga):
...
KeyboardInterrupt
>>> find_max(naga)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in find_max
NameError: global name 'big' is not defined
>>> def find_max(naga):
...     global big
...     big = 0
...     for x in naga:
...             if x > big:
...                     big = x
...
>>> big
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'big' is not defined
>>> find_max(naga)
>>> big
78
>>>
>>>
>>>
>>> name = "satya"
>>> def chang_me(x):
...  x
KeyboardInterrupt
>>> def change_me(name):
...     name = "lakshmi"
...
>>> def change_me(name):
...     name = "lakshmi"
...     print(name)
...
>>> def change_me():
...     name = "lakshmi"
...     print(name)
...
>>> name
'satya'
>>> change_me()
lakshmi
>>> name
'satya'
>>> def change_me():
...     global name
...     name = "lakshmi"
...     print(name)
...
>>> name
'satya'
>>> change_me()
lakshmi
>>> name
'lakshmi'
>>> exit()
raj:MyRepo nagee$
raj:MyRepo nagee$
raj:MyRepo nagee$ clear
raj:MyRepo nagee$ python
Python 2.7.10 (default, Oct 23 2015, 19:19:21)
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> global_name = "satya"
>>>
>>> def just_print():
...     global_name = "naga"
...     print(global_name)
...
>>> global_name
'satya'
>>> just_print()
naga
>>> x = 10
>>> for x in [10, 30, 50]
  File "<stdin>", line 1
    for x in [10, 30, 50]
                        ^
SyntaxError: invalid syntax
>>> for x in [10, 30, 50]:
...  print(x)
...
10
30
50
>>> x = 1025
>>> for x in [10, 30, 50]:
...  print(x)
...
10
30
50
>>> x
50
>>> x = 1025
>>> def naga():
...  for x in [10, 30, 50]:
...     print(x)
...
>>> naga()
10
30
50
>>> x
1025
>>> def naga():
...  print(x)
...
>>> naga()
1025
>>> x
1025
>>> exit()
raj:MyRepo nagee$ clear
raj:MyRepo nagee$ python
Python 2.7.10 (default, Oct 23 2015, 19:19:21)
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 1024
>>>
>>> def naga():
...     print(x)
...
>>> naga()
1024
>>> def naga():
...  x = 10
...  print(x)
...
>>> naga()
10
>>> x
1024
>>> def naga(x):
...     print(x)
...
>>> naga(10)
10
>>> naga(100)
100
>>> naga(1000)
1000
>>> x
1024
>>>
>>>
>>>
>>> naga = [ 43, 56, 78, 90, 23]
>>>
>>>
>>> for x in range
  File "<stdin>", line 1
    for x in range
                 ^
SyntaxError: invalid syntax
>>> if x > 50
KeyboardInterrupt
>>> naga
[43, 56, 78, 90, 23]
>>> [ x for x in naga ]
[43, 56, 78, 90, 23]
>>> [ x for x in naga if x > 50]
[56, 78, 90]
>>> [ x for x in naga if x == 90]
[90]
>>> [ x + 10 for x in naga ]
[53, 66, 88, 100, 33]
>>>
>>>
>>> map(func, list)
KeyboardInterrupt
>>> naga
[43, 56, 78, 90, 23]
>>> def satya(x):
...  if x > 50:
...     return x
...
>>> map(satya, naga)
[None, 56, 78, 90, None]
>>> naga
[43, 56, 78, 90, 23]
>>>
>>>
>>>
>>> cler
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'cler' is not defined
>>>
>>>
>>>
>>> naga
[43, 56, 78, 90, 23]
>>> naga[0[
... naga[0[
KeyboardInterrupt
>>> naga[0]
43
>>> type(naga[0])
<type 'int'>
>>> naga
[43, 56, 78, 90, 23]
>>> "naga"
'naga'
>>> a = 10
>>> a
10
>>> str(a)
'10'
>>> def str(x):
...   dsalkgjhajk
... s
KeyboardInterrupt
>>> naga
[43, 56, 78, 90, 23]
>>> map(str, naga)
['43', '56', '78', '90', '23']
>>> for x in naga:
...     str(x)
...
'43'
'56'
'78'
'90'
'23'
>>> def lakshmi(x):
...     return(str(x))
...
>>> naga
[43, 56, 78, 90, 23]
>>> for x in naga:
...  lakshmi(x)
...
'43'
'56'
'78'
'90'
'23'
>>> map(str, naga)
['43', '56', '78', '90', '23']
>>> map(lambda x: x > 60, naga)
[False, False, True, True, False]
>>> map(lambda x: x > 60, naga)
[False, False, True, True, False]
>>> naga
[43, 56, 78, 90, 23]
>>> filter(lambda x: x > 60, naga)
[78, 90]
>>>
>>>
>>>
>>> def balaji(x):
...     if x > 60:
...             return(x)
...
>>> filter(balaji, naga)
[78, 90]
>>> naga
[43, 56, 78, 90, 23]
>>> reduce(lambda x, y: x + y, naga)
290
>>> naga
[43, 56, 78, 90, 23]
>>> def lakshmi(x, y):
...     return(x + y)
...
>>> reduce(lakshmi, naga)
290
>>> naga
[43, 56, 78, 90, 23]
>>> map(str, naga)
['43', '56', '78', '90', '23']
>>> naga
[43, 56, 78, 90, 23]
>>> balaji = map(str, naga)
>>> balaji
['43', '56', '78', '90', '23']
>>> [ x for x in range(10) if x > 5 ]
[6, 7, 8, 9]
>>> filter(lambda x: x > 5, range(10))
[6, 7, 8, 9]
>>> def filter_lakshmi(x):
...     if x > 5:
...             return(x)
...
>>> filter(filter_lakshmi, range(10))
[6, 7, 8, 9]
>>>
>>>
>>>
>>> balaji = lambda x: x + 100
>>> balaji(100)
200
>>> def balaji(x):
...     x + 100
...     return(x)
...
>>> balaji(100)
100
>>> def balaji(x):
...     x = x + 100
...     return(x)
...
>>> balaji(100)
200
>>> lakshmi = lambda x: x + 100
>>> lakshmi(100)
200
>>> balaji(500)
600
>>> balaji
<function balaji at 0x10f1f8578>
>>> naga = balaji
>>> naga
<function balaji at 0x10f1f8578>
>>> naga(500)
600
>>> a = 10
>>> b = a
>>> a
10
>>> b
10
>>>
